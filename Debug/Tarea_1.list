
Tarea_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080003dc  080003dc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003dc  080003dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003e4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003e8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003e8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a10  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e1  00000000  00000000  00003a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00004028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000183  00000000  00000000  00004248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023953  00000000  00000000  000043cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022a1  00000000  00000000  00027d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd513  00000000  00000000  00029fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001074d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006d4  00000000  00000000  00107518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00107bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003c4 	.word	0x080003c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003c4 	.word	0x080003c4

080001c8 <main>:
/* USER CODE END Includes */
#include "stm32l4xx.h"  // Cabecera específica para STM32L4

void delay_ms(uint32_t ms);

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    // Habilita el reloj para el puerto GPIOA (bit 0 del registro AHB2ENR)
    RCC->AHB2ENR |= (1 << 0);  // Habilita el reloj para GPIOA
 80001cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000244 <main+0x7c>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000244 <main+0x7c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Configura PA5 como salida (MODER5 = 01, bits 10 y 11 del registro GPIOA_MODER)
    GPIOA->MODER &= ~(3 << (5 * 2)); // Limpia los bits 10 y 11
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001e6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (5 * 2));  // Configura el bit 10 a 1 (salida)
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001f6:	6013      	str	r3, [r2, #0]

    // Configurar el pin en modo push-pull (OTYPER5 = 0, bit 5 de GPIOA_OTYPER)
    GPIOA->OTYPER &= ~(1 << 5);  // Push-pull
 80001f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000202:	f023 0320 	bic.w	r3, r3, #32
 8000206:	6053      	str	r3, [r2, #4]

    // Configurar la velocidad del pin
	GPIOA->OSPEEDR |= (1<<10);
 8000208:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000216:	6093      	str	r3, [r2, #8]
    // Desactivar el pull-up/pull-down para PA5 (PUPDR5 = 00, bits 10 y 11 de GPIOA_PUPDR)
    GPIOA->PUPDR &= ~(3 << (5 * 2));  // Sin resistencias pull-up o pull-down
 8000218:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000222:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000226:	60d3      	str	r3, [r2, #12]

    // Bucle principal
    while (1) {
        // Cambiar el estado del pin PA5 (Toggle)
        GPIOA->ODR ^= (1 << 5);  // Alterna el bit 5 del registro ODR
 8000228:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000232:	f083 0320 	eor.w	r3, r3, #32
 8000236:	6153      	str	r3, [r2, #20]

        // Esperar 500 ms
        delay_ms(500);
 8000238:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800023c:	f000 f804 	bl	8000248 <delay_ms>
        GPIOA->ODR ^= (1 << 5);  // Alterna el bit 5 del registro ODR
 8000240:	bf00      	nop
 8000242:	e7f1      	b.n	8000228 <main+0x60>
 8000244:	40021000 	.word	0x40021000

08000248 <delay_ms>:
    }
}

// Función de retardo (bloqueante) para crear un retraso de aproximadamente 500 ms
void delay_ms(uint32_t ms) {
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) {
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e003      	b.n	800025e <delay_ms+0x16>
        __NOP();  // Instrucción "No Operation" para consumir tiempo
 8000256:	bf00      	nop
    for (uint32_t i = 0; i < ms * 4000; i++) {
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3301      	adds	r3, #1
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000264:	fb02 f303 	mul.w	r3, r2, r3
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	429a      	cmp	r2, r3
 800026c:	d3f3      	bcc.n	8000256 <delay_ms+0xe>
    }
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000280:	bf00      	nop
 8000282:	e7fd      	b.n	8000280 <NMI_Handler+0x4>

08000284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <HardFault_Handler+0x4>

0800028c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <MemManage_Handler+0x4>

08000294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <BusFault_Handler+0x4>

0800029c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a0:	bf00      	nop
 80002a2:	e7fd      	b.n	80002a0 <UsageFault_Handler+0x4>

080002a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d2:	f000 f83f 	bl	8000354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <SystemInit+0x20>)
 80002e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e6:	4a05      	ldr	r2, [pc, #20]	@ (80002fc <SystemInit+0x20>)
 80002e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000304:	f7ff ffea 	bl	80002dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	@ (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	@ (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	@ (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800032e:	f000 f825 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000332:	f7ff ff49 	bl	80001c8 <main>

08000336 <LoopForever>:

LoopForever:
    b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000338:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000344:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000348:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800034c:	20000024 	.word	0x20000024

08000350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC1_2_IRQHandler>
	...

08000354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <HAL_IncTick+0x20>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <HAL_IncTick+0x24>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4413      	add	r3, r2
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <HAL_IncTick+0x24>)
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	20000000 	.word	0x20000000
 8000378:	20000020 	.word	0x20000020

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	@ (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	@ (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	@ (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	@ (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
